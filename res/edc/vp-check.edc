/*
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
#define CHECK_STYLE_DEFAULT_BG_NORMAL_MIN_MAX_INC 42 42

#define CHECK_DEFAULT_TEXT_NORMAL_COLOR_INC        255 255 255 255
#define CHECK_DEFAULT_TEXT_PRESSED_COLOR_INC      255 255 255 255
#define CHECK_DEFAULT_TEXT_DISABLED_COLOR_INC          136 136 136 136

//////////////////////////////////////////////////////////
//
#define	GALLERY_EDC_IMAGE_CHECK_BG "T01_checkbox.png"
#define	GALLERY_EDC_IMAGE_CHECK_BG_DIM "00_check_bg_dim.png"
#define	GALLERY_EDC_IMAGE_CHECK_BG_CHECKING "T01_check.png"
#define GALLERY_EDC_IMAGE_CHECK_ALBUM_BG "T01_checkbox.png"
#define GALLERY_EDC_IMAGE_CHECK_GRID "T01_grid_select_check.png"
#define GALLERY_EDC_IMAGE_CHECK_PINCH_GRID "00_grid_select_check.png"

// Grid item background size W: 14+158+6; H: 24+158
#define W               178
#define H               182

// Gap between bg and icon
#define GAP_BG_L         14
#define GAP_BG_R         6
#define GAP_BG_T         24

// Gap between icon and shadow
#define GAP_ICON_L         3
#define GAP_ICON_R         3
#define GAP_ICON_T         0
#define GAP_ICON_B         4

// Shadow image size
#define SHADOW_W               (W-GAP_BG_L-GAP_BG_R+GAP_ICON_L+GAP_ICON_R)
#define SHADOW_H               (H-GAP_BG_T+GAP_ICON_B)

// Gap between bg and shadow
#define GAP_SHADOW_L         (GAP_BG_L-GAP_ICON_L)
#define GAP_SHADOW_R         (GAP_BG_R-GAP_ICON_R)
#define GAP_SHADOW_T         (GAP_BG_T-GAP_ICON_T)
#define GAP_SHADOW_B         (0+GAP_ICON_B)



#define ZOOMED_W               116 //6+104+6
#define ZOOMED_H               110 //6+104

#define ZOOMED_GAP_L         6
#define ZOOMED_GAP_R         6
#define ZOOMED_GAP_T         6
#define ZOOMED_GAP_B         0
//
//////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
//
// check default textblock style
//
///////////////////////////////////////////////////////////////////////////////////////
	styles {
		style { name: "check_label_textblock_style";
			base: "font=Tizen:style=Roman font_size=32 color=#ffffff wrap=char";
			tag: "br" "\n";
			tag: "ps" "ps";
			tag: "hilight" "+ font=Tizen:style=Bold";
			tag: "b" "+ font=Tizen:style=Bold";
			tag: "whitecolor" "+ color=#ffffff";
			tag: "tab" "\t";
		}
	}

#define CHECK_STATE_DEFAULT 0
#define CHECK_STATE_VISIBLE 1
#define CHECK_STATE_DISABLED_VISIBLE 2
#define CHECK_STATE_DISABLED 3

////////////////////////////////////////////////////////////////////////////////
#define CHECK_STYLE_DEFAULT(style_name, image_bg, image_checking, min_width, min_height) \
 group { name: "elm/check/base/"style_name; \
      images { \
         image: image_bg COMP; \
         image: GALLERY_EDC_IMAGE_CHECK_BG_DIM COMP; \
         image: image_checking COMP; \
      } \
      script { \
         public check_state = CHECK_STATE_DEFAULT; \
      } \
      parts { \
         part { name: "back_bg"; \
            type: RECT; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel2.relative: 0.0 1.0; \
               align: 0 0.5; \
               min: min_width min_height; \
               fixed: 1 0; \
               color: 0 0 0 0; \
            } \
         } \
         part { name: "bg"; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               min: CHECK_STYLE_DEFAULT_BG_NORMAL_MIN_MAX_INC; \
               max: CHECK_STYLE_DEFAULT_BG_NORMAL_MIN_MAX_INC; \
               fixed: 1 1; \
               rel1.to: "back_bg"; \
               rel2.to: "back_bg"; \
               image.normal: image_bg; \
               fill.smooth : 0; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               image.normal: GALLERY_EDC_IMAGE_CHECK_BG_DIM; \
               fill.smooth : 0; \
            } \
         } \
         part { name: "check"; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel1.to: "bg"; \
               rel2.to: "bg"; \
               visible: 0; \
               image.normal: image_checking; \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
         } \
         part { name: "elm.swallow.content"; \
            type: SWALLOW; \
            description { state: "default" 0.0; \
               fixed: 1 0; \
               visible: 0; \
               color: 255 255 255 255; \
               align: 0.0 0.5; \
               rel1 { \
                  to_x: "bg"; \
                  relative: 1.0 0.0; \
                  offset: 1 1; \
               } \
               rel2 { \
                  to_x: "bg"; \
                  relative: 1.0 1.0; \
                  offset: 2 -2; \
               } \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               fixed: 1 1; \
               visible: 1; \
               aspect: 1.0 1.0; \
               aspect_preference: VERTICAL; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               color: 128 128 128 128; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               color: 128 128 128 128; \
               fixed: 1 1; \
               visible: 1; \
               aspect: 1.0 1.0; \
            } \
         } \
         part { name: "elm.text"; \
            type: TEXTBLOCK; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               visible: 0; \
               fixed: 0 1; \
               rel1 { \
                  relative: 1.0 0.5; \
                  offset: 1 1; \
                  to_x: "elm.swallow.content"; \
               } \
               rel2 { \
                  relative: 1.0 0.5; \
                  offset: -2 -2; \
               } \
               align: 0.0 0.5; \
               text { \
                  style: "check_label_textblock_style"; \
                  min: 0 0; \
               } \
               color: CHECK_DEFAULT_TEXT_NORMAL_COLOR_INC; \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
               text.min: 1 1; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
               text.min: 1 1; \
               color: CHECK_DEFAULT_TEXT_DISABLED_COLOR_INC; \
            } \
         } \
         part { name: "events1"; \
            type: RECT; \
            ignore_flags: ON_HOLD; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
         } \
         part { name: "events2"; \
            type: RECT; \
            repeat_events: 1; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
         } \
         part { name: "disabler"; \
            type: RECT; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
               visible: 0; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
         } \
      } \
      programs { \
         program { name: "click"; \
            signal: "mouse,clicked,1"; \
            source: "events1"; \
            action: SIGNAL_EMIT "elm,action,check,toggle" ""; \
         } \
         program { name: "check_on"; \
            signal: "elm,state,check,on"; \
            source: "elm"; \
            script { \
               set_int(check_state, CHECK_STATE_VISIBLE); \
               set_state(PART:"check", "visible", 0.0); \
            } \
         } \
         program { name: "check_off"; \
            signal: "elm,state,check,off"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "check"; \
            script { \
               if (get_int(check_state) == CHECK_STATE_VISIBLE) \
                 { \
                    set_int(check_state, CHECK_STATE_DEFAULT); \
                    set_state(PART:"check", "default", 0.0); \
                 } \
            } \
         } \
         program { name: "text_show"; \
            signal: "elm,state,text,visible"; \
            source: "elm"; \
            action: STATE_SET "visible" 0.0; \
            target: "elm.text"; \
         } \
         program { name: "text_hide"; \
            signal: "elm,state,text,hidden"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "elm.text"; \
         } \
         program { name: "icon_show"; \
            signal: "elm,state,icon,visible"; \
            source: "elm"; \
            action: STATE_SET "visible" 0.0; \
            target: "elm.swallow.content"; \
         } \
         program { name: "icon_hide"; \
            signal: "elm,state,icon,hidden"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "elm.swallow.content"; \
         } \
         program { name: "disable"; \
            signal: "elm,state,disabled"; \
            source: "elm"; \
            action: STATE_SET "disabled" 0.0; \
            target: "disabler"; \
            target: "bg"; \
            after: "disable_text"; \
         } \
         program { name: "disable_text"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"elm.text", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.text", "disabled_visible", 0.0); \
               else \
                 set_state(PART:"elm.text", "disabled", 0.0); \
               get_state(PART:"elm.swallow.content", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.swallow.content", "disabled_visible", 0.0); \
               else \
                 set_state(PART:"elm.swallow.content", "disabled", 0.0); \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 { \
                    set_state(PART:"check", "disabled_visible", 0.0); \
                    set_int(check_state, CHECK_STATE_DISABLED_VISIBLE); \
                 } \
            } \
         } \
         program { name: "enable"; \
            signal: "elm,state,enabled"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "disabler"; \
            target: "bg"; \
            after: "enable_text"; \
         } \
         program { name: "enable_text"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"elm.text", st, 30, vl); \
               if (!strcmp(st, "disabled_visible")) \
                 set_state(PART:"elm.text", "visible", 0.0); \
               else \
                 set_state(PART:"elm.text", "default", 0.0); \
               get_state(PART:"elm.swallow.content", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.swallow.content", "visible", 0.0); \
               else \
                 set_state(PART:"elm.swallow.content", "default", 0.0); \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "disabled_visible")) \
                 { \
                    set_state(PART:"check", "visible", 0.0); \
                    set_int(check_state, CHECK_STATE_VISIBLE); \
                 } \
               else \
                 set_int(check_state, CHECK_STATE_DEFAULT); \
            } \
         } \
      } \
   }

////////////////////////////////////////////////////////////////////////////////
	CHECK_STYLE_DEFAULT("gallery/default", GALLERY_EDC_IMAGE_CHECK_BG, GALLERY_EDC_IMAGE_CHECK_BG_CHECKING, 42, 42)

////////////////////////////////////////////////////////////////////////////////
	CHECK_STYLE_DEFAULT("gallery/album", GALLERY_EDC_IMAGE_CHECK_ALBUM_BG, GALLERY_EDC_IMAGE_CHECK_BG_CHECKING, 42, 42)

////////////////////////////////////////////////////////////////////////////////
#define CHECK_STYLE_GRID(style_name, image_grid, width, height) \
   group { name: "elm/check/base/"style_name; \
      images.image: image_grid COMP; \
      parts { \
         part { name: "bg"; \
            type: RECT; \
            scale: 1; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "default" 0.0; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               visible: 0; \
            } \
         } \
		part { name: "icon_bg_img"; \
			type: RECT; \
			mouse_events: 0; \
			scale : 1; \
			description { \
				color: 0 0 0 0; \
				rel1 { relative: GAP_SHADOW_L/W GAP_SHADOW_T/H; to: "bg"; } \
				rel2 { relative: (W-GAP_SHADOW_R-1)/W (H+GAP_SHADOW_B-1)/H; to: "bg"; } \
			} \
		} \
		part { name: "icon_bg"; \
			type: RECT; \
			description { state: "default" 0.0; \
				color: 0 0 0 0; \
				rel1 { relative: GAP_ICON_L/SHADOW_W GAP_ICON_T/SHADOW_H; to: "icon_bg_img"; } \
				rel2 { relative: (SHADOW_W-GAP_ICON_R+2)/SHADOW_W (SHADOW_H-GAP_ICON_B+1)/SHADOW_H; to: "icon_bg_img"; } \
			} \
		} \
         part { name: "bg2"; \
            type: RECT; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel1.to: "icon_bg"; \
               rel2.to: "icon_bg"; \
               align: 0.5 0.5; \
               min: width height; \
               max: width height; \
               color:  0 0 0 0; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "default" 0.0; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               visible: 0; \
            } \
         } \
         part { name: "selected_bg"; \
            type: RECT; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel1.to: "icon_bg"; \
               rel2.to: "icon_bg"; \
               color: 0 0 0 0; \
               visible: 0; \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               color: 0 0 0 153; \
               visible: 1; \
            } \
         } \
         part { name: "check"; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               rel1.to: "bg2"; \
               rel2.to: "bg2"; \
               visible: 0; \
               image.normal: image_grid; \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
            description { state: "pressed" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
         } \
         part { name: "elm.swallow.content"; \
            type: SWALLOW; \
            description { \
               state: "default" 0.0; \
               fixed: 1 0; \
               visible: 0; \
               color: 255 255 255 255; \
               align: 0.0 0.5; \
               rel1 { \
                  to_x: "bg2"; \
                  relative: 1.0 0.0; \
                  offset: 1 1; \
               } \
               rel2 { \
                  to_x: "bg2"; \
                  relative: 1.0 1.0; \
                  offset: 2 -2; \
               } \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               fixed: 1 1; \
               visible: 1; \
               aspect: 1.0 1.0; \
               aspect_preference: VERTICAL; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               color: 128 128 128 128; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               color: 128 128 128 128; \
               fixed: 1 1; \
               visible: 1; \
               aspect: 1.0 1.0; \
            } \
         } \
         part { name: "elm.text"; \
            type: TEXTBLOCK; \
            mouse_events: 0; \
            scale: 1; \
            description { state: "default" 0.0; \
               visible: 0; \
               fixed: 0 1; \
               rel1 { \
                  relative: 1.0 0.5; \
                  offset: 1 1; \
                  to_x: "elm.swallow.content"; \
               } \
               rel2 { \
                  relative: 1.0 0.5; \
                  offset: -2 -2; \
               } \
               color: 255 255 255 255; \
               align: 0.0 0.5; \
               text { \
                  style: "check_label_textblock_style"; \
                  min: 0 0; \
               } \
               color: CHECK_DEFAULT_TEXT_NORMAL_COLOR_INC; \
            } \
            description { state: "visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
               text.min: 1 1; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
            } \
            description { state: "disabled_visible" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
               text.min: 1 1; \
               color: CHECK_DEFAULT_TEXT_DISABLED_COLOR_INC; \
            } \
         } \
         part { name: "events"; \
            type: RECT; \
            ignore_flags: ON_HOLD; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
            } \
         } \
         part { name: "disabler"; \
            type: RECT; \
            description { state: "default" 0.0; \
               color: 0 0 0 0; \
               visible: 0; \
            } \
            description { state: "disabled" 0.0; \
               inherit: "default" 0.0; \
               visible: 1; \
            } \
         } \
      } \
      programs { \
         program { name: "click"; \
            signal: "mouse,up,1"; \
            source: "events"; \
            action: SIGNAL_EMIT "elm,action,check,toggle" ""; \
            after: "bg_normal"; \
         } \
         program { name: "bg_normal"; \
            script { \
               set_state(PART:"bg", "default", 0.0); \
               set_state(PART:"bg2", "default", 0.0); \
            } \
         } \
         program { name: "mouseout"; \
            signal: "mouse,out"; \
            source: "events"; \
            after: "bg_check_normal"; \
         } \
         program { name: "bg_check_normal"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "pressed")) \
                 set_state(PART:"check", "visible", 0.0); \
               set_state(PART:"bg", "default", 0.0); \
               set_state(PART:"bg2", "default", 0.0); \
            } \
         } \
         program { name: "pressed"; \
            signal: "mouse,down,1"; \
            source: "events"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"check", "pressed", 0.0); \
               set_state(PART:"bg", "pressed", 0.0); \
               set_state(PART:"bg2", "pressed", 0.0); \
            } \
         } \
         program { name: "check_on"; \
            signal: "elm,state,check,on"; \
            source: "elm"; \
            action: STATE_SET "visible" 0.0; \
            target: "check"; \
            target: "selected_bg"; \
         } \
         program { name: "check_off"; \
            signal: "elm,state,check,off"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "check"; \
            target: "selected_bg"; \
         } \
         program { name: "text_show"; \
            signal: "elm,state,text,visible"; \
            source: "elm"; \
            action: STATE_SET "visible" 0.0; \
            target: "elm.text"; \
         } \
         program { name: "text_hide"; \
            signal: "elm,state,text,hidden"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "elm.text"; \
         } \
         program { name: "icon_show"; \
            signal: "elm,state,icon,visible"; \
            source: "elm"; \
            action: STATE_SET "visible" 0.0; \
            target: "elm.swallow.content"; \
         } \
         program { name: "icon_hide"; \
            signal: "elm,state,icon,hidden"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "elm.swallow.content"; \
         } \
         program { name: "disable"; \
            signal: "elm,state,disabled"; \
            source: "elm"; \
            action: STATE_SET "disabled" 0.0; \
            target: "disabler"; \
            target: "bg"; \
            target: "bg2"; \
            after: "disable_text"; \
         } \
         program { name: "disable_text"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"elm.text", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.text", "disabled_visible", 0.0); \
               else \
                 set_state(PART:"elm.text", "disabled", 0.0); \
               get_state(PART:"elm.swallow.content", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.swallow.content", "disabled_visible", 0.0); \
               else \
                 set_state(PART:"elm.swallow.content", "disabled", 0.0); \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"check", "disabled_visible", 0.0); \
            } \
         } \
         program { name: "enable"; \
            signal: "elm,state,enabled"; \
            source: "elm"; \
            action: STATE_SET "default" 0.0; \
            target: "disabler"; \
            target: "bg"; \
            target: "bg2"; \
            after: "enable_text"; \
         } \
         program { name: "enable_text"; \
            script { \
               new st[31]; \
               new Float:vl; \
               get_state(PART:"elm.text", st, 30, vl); \
               if (!strcmp(st, "disabled_visible")) \
                 set_state(PART:"elm.text", "visible", 0.0); \
               else \
                 set_state(PART:"elm.text", "default", 0.0); \
               get_state(PART:"elm.swallow.content", st, 30, vl); \
               if (!strcmp(st, "visible")) \
                 set_state(PART:"elm.swallow.content", "visible", 0.0); \
               else \
                 set_state(PART:"elm.swallow.content", "default", 0.0); \
               get_state(PART:"check", st, 30, vl); \
               if (!strcmp(st, "disabled_visible")) \
                 set_state(PART:"check", "visible", 0.0); \
            } \
         } \
      } \
   }

////////////////////////////////////////////////////////////////////////////////
	CHECK_STYLE_GRID("gallery/grid", GALLERY_EDC_IMAGE_CHECK_GRID, 64, 64)

////////////////////////////////////////////////////////////////////////////////
   group { name: "elm/check/base/gallery/pinch/grid";
      images.image: GALLERY_EDC_IMAGE_CHECK_PINCH_GRID COMP;
      parts {
         part { name: "bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
        part { name: "icon_bg";
                type: RECT;
                description {
                    state: "default" 0.0;
                    color: 0 0 0 0;
                    rel1 { relative: ZOOMED_GAP_L/ZOOMED_W ZOOMED_GAP_T/ZOOMED_H; to: "bg"; }
                    rel2 { relative: (ZOOMED_W-ZOOMED_GAP_R)/ZOOMED_W (ZOOMED_H-ZOOMED_GAP_B)/ZOOMED_H; to: "bg"; }
                }
        }
         part { name: "bg2";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "icon_bg";
               rel2.to: "icon_bg";
               align: 0.5 0.5;
               min: 40 40;
               max: 40 40;
               color:  0 0 0 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "selected_bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "icon_bg";
               rel2.to: "icon_bg";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 153;
               visible: 1;
            }
         }
         part { name: "check";
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg2";
               rel2.to: "bg2";
               visible: 0;
               image.normal: GALLERY_EDC_IMAGE_CHECK_PINCH_GRID;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            description {
               state: "default" 0.0;
               fixed: 1 0;
               visible: 0;
               color: 255 255 255 255;
               align: 0.0 0.5;
               rel1 {
                  to_x: "bg2";
                  relative: 1.0 0.0;
                  offset: 1 1;
               }
               rel2 {
                  to_x: "bg2";
                  relative: 1.0 1.0;
                  offset: 2 -2;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               fixed: 1 1;
               visible: 1;
               aspect: 1.0 1.0;
               aspect_preference: VERTICAL;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 128 128 128 128;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
               color: 128 128 128 128;
               fixed: 1 1;
               visible: 1;
               aspect: 1.0 1.0;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               fixed: 0 1;
               rel1 {
                  relative: 1.0 0.5;
                  offset: 1 1;
                  to_x: "elm.swallow.content";
               }
               rel2 {
                  relative: 1.0 0.5;
                  offset: -2 -2;
               }
               color: 255 255 255 255;
               align: 0.0 0.5;
               text {
                  style: "check_label_textblock_style";
                  min: 0 0;
               }
               color: CHECK_DEFAULT_TEXT_NORMAL_COLOR_INC;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               text.min: 1 1;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               text.min: 1 1;
               color: CHECK_DEFAULT_TEXT_DISABLED_COLOR_INC;
            }
         }
         part { name: "events";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "click";
            signal: "mouse,up,1";
            source: "events";
            action: SIGNAL_EMIT "elm,action,check,toggle" "";
            after: "bg_normal";
         }
         program { name: "bg_normal";
            script {
               set_state(PART:"bg", "default", 0.0);
               set_state(PART:"bg2", "default", 0.0);
            }
         }
         program { name: "mouseout";
            signal: "mouse,out";
            source: "events";
            after: "bg_check_normal";
         }
         program { name: "bg_check_normal";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "pressed"))
                 set_state(PART:"check", "visible", 0.0);
               set_state(PART:"bg", "default", 0.0);
               set_state(PART:"bg2", "default", 0.0);
            }
         }
         program { name: "pressed";
            signal: "mouse,down,1";
            source: "events";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"check", "pressed", 0.0);
               set_state(PART:"bg", "pressed", 0.0);
               set_state(PART:"bg2", "pressed", 0.0);
            }
         }
         program { name: "check_on";
            signal: "elm,state,check,on";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "check";
            target: "selected_bg";
         }
         program { name: "check_off";
            signal: "elm,state,check,off";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "check";
            target: "selected_bg";
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.text";
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disabler";
            target: "bg";
            target: "bg2";
            after: "disable_text";
         }
         program { name: "disable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.text", "disabled_visible", 0.0);
               else
                 set_state(PART:"elm.text", "disabled", 0.0);
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.swallow.content", "disabled_visible", 0.0);
               else
                 set_state(PART:"elm.swallow.content", "disabled", 0.0);
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"check", "disabled_visible", 0.0);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disabler";
            target: "bg";
            target: "bg2";
            after: "enable_text";
         }
         program { name: "enable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "disabled_visible"))
                 set_state(PART:"elm.text", "visible", 0.0);
               else
                 set_state(PART:"elm.text", "default", 0.0);
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.swallow.content", "visible", 0.0);
               else
                 set_state(PART:"elm.swallow.content", "default", 0.0);
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "disabled_visible"))
                 set_state(PART:"check", "visible", 0.0);
            }
         }
      }
   }

////////////////////////////////////////////////////////////////////////////////
   group { name: "elm/check/base/gallery/album/grid";
      parts {
         part { name: "bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "bg2";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
               align: 0.5 0.5;
               min: 40 40;
               max: 40 40;
               color:  0 0 0 0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "selected_bg";
            type: RECT;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg";
               rel2.to: "bg";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               color: 0 0 0 153;
               visible: 1;
            }
         }
         part { name: "check";
            type: RECT;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               rel1.to: "bg2";
               rel2.to: "bg2";
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "pressed" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
            }
         }
         part { name: "elm.swallow.content";
            type: SWALLOW;
            description {
               state: "default" 0.0;
               fixed: 1 0;
               visible: 0;
               color: 255 255 255 255;
               align: 0.0 0.5;
               rel1 {
                  to_x: "bg2";
                  relative: 1.0 0.0;
                  offset: 1 1;
               }
               rel2 {
                  to_x: "bg2";
                  relative: 1.0 1.0;
                  offset: 2 -2;
               }
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               fixed: 1 1;
               visible: 1;
               aspect: 1.0 1.0;
               aspect_preference: VERTICAL;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               color: 128 128 128 128;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
               color: 128 128 128 128;
               fixed: 1 1;
               visible: 1;
               aspect: 1.0 1.0;
            }
         }
         part { name: "elm.text";
            type: TEXTBLOCK;
            mouse_events: 0;
            scale: 1;
            description { state: "default" 0.0;
               visible: 0;
               fixed: 0 1;
               rel1 {
                  relative: 1.0 0.5;
                  offset: 1 1;
                  to_x: "elm.swallow.content";
               }
               rel2 {
                  relative: 1.0 0.5;
                  offset: -2 -2;
               }
               color: 255 255 255 255;
               align: 0.0 0.5;
               text {
                  style: "check_label_textblock_style";
                  min: 0 0;
               }
               color: CHECK_DEFAULT_TEXT_NORMAL_COLOR_INC;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               text.min: 1 1;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
            }
            description { state: "disabled_visible" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               text.min: 1 1;
               color: CHECK_DEFAULT_TEXT_DISABLED_COLOR_INC;
            }
         }
         part { name: "events";
            type: RECT;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "disabler";
            type: RECT;
            description { state: "default" 0.0;
               color: 0 0 0 0;
               visible: 0;
            }
            description { state: "disabled" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
      }
      programs {
         program { name: "click";
            signal: "mouse,up,1";
            source: "events";
            action: SIGNAL_EMIT "elm,action,check,toggle" "";
            after: "bg_normal";
         }
         program { name: "bg_normal";
            script {
               set_state(PART:"bg", "default", 0.0);
               set_state(PART:"bg2", "default", 0.0);
            }
         }
         program { name: "mouseout";
            signal: "mouse,out";
            source: "events";
            after: "bg_check_normal";
         }
         program { name: "bg_check_normal";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "pressed"))
                 set_state(PART:"check", "visible", 0.0);
               set_state(PART:"bg", "default", 0.0);
               set_state(PART:"bg2", "default", 0.0);
            }
         }
         program { name: "pressed";
            signal: "mouse,down,1";
            source: "events";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"check", "pressed", 0.0);
               set_state(PART:"bg", "pressed", 0.0);
               set_state(PART:"bg2", "pressed", 0.0);
            }
         }
         program { name: "check_on";
            signal: "elm,state,check,on";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "check";
            target: "selected_bg";
         }
         program { name: "check_off";
            signal: "elm,state,check,off";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "check";
            target: "selected_bg";
         }
         program { name: "text_show";
            signal: "elm,state,text,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.text";
         }
         program { name: "text_hide";
            signal: "elm,state,text,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.text";
         }
         program { name: "icon_show";
            signal: "elm,state,icon,visible";
            source: "elm";
            action: STATE_SET "visible" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "icon_hide";
            signal: "elm,state,icon,hidden";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "elm.swallow.content";
         }
         program { name: "disable";
            signal: "elm,state,disabled";
            source: "elm";
            action: STATE_SET "disabled" 0.0;
            target: "disabler";
            target: "bg";
            target: "bg2";
            after: "disable_text";
         }
         program { name: "disable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.text", "disabled_visible", 0.0);
               else
                 set_state(PART:"elm.text", "disabled", 0.0);
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.swallow.content", "disabled_visible", 0.0);
               else
                 set_state(PART:"elm.swallow.content", "disabled", 0.0);
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"check", "disabled_visible", 0.0);
            }
         }
         program { name: "enable";
            signal: "elm,state,enabled";
            source: "elm";
            action: STATE_SET "default" 0.0;
            target: "disabler";
            target: "bg";
            target: "bg2";
            after: "enable_text";
         }
         program { name: "enable_text";
            script {
               new st[31];
               new Float:vl;
               get_state(PART:"elm.text", st, 30, vl);
               if (!strcmp(st, "disabled_visible"))
                 set_state(PART:"elm.text", "visible", 0.0);
               else
                 set_state(PART:"elm.text", "default", 0.0);
               get_state(PART:"elm.swallow.content", st, 30, vl);
               if (!strcmp(st, "visible"))
                 set_state(PART:"elm.swallow.content", "visible", 0.0);
               else
                 set_state(PART:"elm.swallow.content", "default", 0.0);
               get_state(PART:"check", st, 30, vl);
               if (!strcmp(st, "disabled_visible"))
                 set_state(PART:"check", "visible", 0.0);
            }
         }
      }
   }

#undef CHECK_STATE_DEFAULT
#undef CHECK_STATE_VISIBLE
#undef CHECK_STATE_DISABLED_VISIBLE
#undef CHECK_STATE_DISABLED
